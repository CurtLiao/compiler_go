Terminals unused in grammar

   BREAK
   CASE
   CONTINUE
   DEFAULT
   ELSE
   FOR
   FUNC
   GO
   IF
   IMPORT
   NIL
   PRINT
   PRINTLN
   RETURN
   STRUCT
   SWITCH
   TYPE
   VOID
   WHILE
   LESS_EQUAL
   GREAT_EQUAL
   EQUAL
   NOT_EQUAL
   AND
   ADD_ASSIGNMENT
   SUB_ASSIGNMENT
   MUL_ASSIGNMENT
   DIV_ASSIGNMENT


State 6 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statement

    2 statement: identifier_declared
    3          | identifier_declared statement

    4 identifier_list: ID ',' identifier_list
    5                | ID '=' ID ',' identifier_list
    6                | ID '=' ID
    7                | ID

    8 identifier_declared: VAR identifier_list primitive_type
    9                    | VAR identifier_list INT '=' NUMBER
   10                    | VAR identifier_list BOOL '=' bool_type
   11                    | VAR identifier_list STRING '=' STR
   12                    | VAR identifier_list REAL '=' REAL_NUMBER
   13                    | VAR identifier_list '[' NUMBER ']' primitive_type
   14                    | CONST identifier_list '=' primitive

   15 primitive_type: STRING
   16               | INT
   17               | BOOL
   18               | REAL

   19 primitive: STR
   20          | NUMBER
   21          | REAL_NUMBER
   22          | bool_type

   23 bool_type: TRUE
   24          | FALSE


Terminals, with rules where they appear

$end (0) 0
',' (44) 4 5
'=' (61) 5 6 9 10 11 12 14
'[' (91) 13
']' (93) 13
error (256)
BOOL (258) 10 17
BREAK (259)
CASE (260)
CONST (261) 14
CONTINUE (262)
DEFAULT (263)
ELSE (264)
FALSE (265) 24
FOR (266)
FUNC (267)
GO (268)
IF (269)
IMPORT (270)
INT (271) 9 16
NIL (272)
PRINT (273)
PRINTLN (274)
REAL (275) 12 18
RETURN (276)
STRING (277) 11 15
STRUCT (278)
SWITCH (279)
TRUE (280) 23
TYPE (281)
VAR (282) 8 9 10 11 12 13
VOID (283)
WHILE (284)
LESS_EQUAL (285)
GREAT_EQUAL (286)
EQUAL (287)
NOT_EQUAL (288)
AND (289)
ADD_ASSIGNMENT (290)
SUB_ASSIGNMENT (291)
MUL_ASSIGNMENT (292)
DIV_ASSIGNMENT (293)
NUMBER (294) 9 13 20
STR (295) 11 19
ID (296) 4 5 6 7
REAL_NUMBER (297) 12 21


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
statement (49)
    on left: 2 3, on right: 1 3
identifier_list (50)
    on left: 4 5 6 7, on right: 4 5 8 9 10 11 12 13 14
identifier_declared (51)
    on left: 8 9 10 11 12 13 14, on right: 2 3
primitive_type (52)
    on left: 15 16 17 18, on right: 8 13
primitive (53)
    on left: 19 20 21 22, on right: 14
bool_type (54)
    on left: 23 24, on right: 10 22


State 0

    0 $accept: . program $end

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    program              go to state 3
    statement            go to state 4
    identifier_declared  go to state 5


State 1

   14 identifier_declared: CONST . identifier_list '=' primitive

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 2

    8 identifier_declared: VAR . identifier_list primitive_type
    9                    | VAR . identifier_list INT '=' NUMBER
   10                    | VAR . identifier_list BOOL '=' bool_type
   11                    | VAR . identifier_list STRING '=' STR
   12                    | VAR . identifier_list REAL '=' REAL_NUMBER
   13                    | VAR . identifier_list '[' NUMBER ']' primitive_type

    ID  shift, and go to state 6

    identifier_list  go to state 8


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: statement .

    $default  reduce using rule 1 (program)


State 5

    2 statement: identifier_declared .
    3          | identifier_declared . statement

    CONST  shift, and go to state 1
    VAR    shift, and go to state 2

    $default  reduce using rule 2 (statement)

    statement            go to state 10
    identifier_declared  go to state 5


State 6

    4 identifier_list: ID . ',' identifier_list
    5                | ID . '=' ID ',' identifier_list
    6                | ID . '=' ID
    7                | ID .

    ','  shift, and go to state 11
    '='  shift, and go to state 12

    '='       [reduce using rule 7 (identifier_list)]
    $default  reduce using rule 7 (identifier_list)


State 7

   14 identifier_declared: CONST identifier_list . '=' primitive

    '='  shift, and go to state 13


State 8

    8 identifier_declared: VAR identifier_list . primitive_type
    9                    | VAR identifier_list . INT '=' NUMBER
   10                    | VAR identifier_list . BOOL '=' bool_type
   11                    | VAR identifier_list . STRING '=' STR
   12                    | VAR identifier_list . REAL '=' REAL_NUMBER
   13                    | VAR identifier_list . '[' NUMBER ']' primitive_type

    BOOL    shift, and go to state 14
    INT     shift, and go to state 15
    REAL    shift, and go to state 16
    STRING  shift, and go to state 17
    '['     shift, and go to state 18

    primitive_type  go to state 19


State 9

    0 $accept: program $end .

    $default  accept


State 10

    3 statement: identifier_declared statement .

    $default  reduce using rule 3 (statement)


State 11

    4 identifier_list: ID ',' . identifier_list

    ID  shift, and go to state 6

    identifier_list  go to state 20


State 12

    5 identifier_list: ID '=' . ID ',' identifier_list
    6                | ID '=' . ID

    ID  shift, and go to state 21


State 13

   14 identifier_declared: CONST identifier_list '=' . primitive

    FALSE        shift, and go to state 22
    TRUE         shift, and go to state 23
    NUMBER       shift, and go to state 24
    STR          shift, and go to state 25
    REAL_NUMBER  shift, and go to state 26

    primitive  go to state 27
    bool_type  go to state 28


State 14

   10 identifier_declared: VAR identifier_list BOOL . '=' bool_type
   17 primitive_type: BOOL .

    '='  shift, and go to state 29

    $default  reduce using rule 17 (primitive_type)


State 15

    9 identifier_declared: VAR identifier_list INT . '=' NUMBER
   16 primitive_type: INT .

    '='  shift, and go to state 30

    $default  reduce using rule 16 (primitive_type)


State 16

   12 identifier_declared: VAR identifier_list REAL . '=' REAL_NUMBER
   18 primitive_type: REAL .

    '='  shift, and go to state 31

    $default  reduce using rule 18 (primitive_type)


State 17

   11 identifier_declared: VAR identifier_list STRING . '=' STR
   15 primitive_type: STRING .

    '='  shift, and go to state 32

    $default  reduce using rule 15 (primitive_type)


State 18

   13 identifier_declared: VAR identifier_list '[' . NUMBER ']' primitive_type

    NUMBER  shift, and go to state 33


State 19

    8 identifier_declared: VAR identifier_list primitive_type .

    $default  reduce using rule 8 (identifier_declared)


State 20

    4 identifier_list: ID ',' identifier_list .

    $default  reduce using rule 4 (identifier_list)


State 21

    5 identifier_list: ID '=' ID . ',' identifier_list
    6                | ID '=' ID .

    ','  shift, and go to state 34

    $default  reduce using rule 6 (identifier_list)


State 22

   24 bool_type: FALSE .

    $default  reduce using rule 24 (bool_type)


State 23

   23 bool_type: TRUE .

    $default  reduce using rule 23 (bool_type)


State 24

   20 primitive: NUMBER .

    $default  reduce using rule 20 (primitive)


State 25

   19 primitive: STR .

    $default  reduce using rule 19 (primitive)


State 26

   21 primitive: REAL_NUMBER .

    $default  reduce using rule 21 (primitive)


State 27

   14 identifier_declared: CONST identifier_list '=' primitive .

    $default  reduce using rule 14 (identifier_declared)


State 28

   22 primitive: bool_type .

    $default  reduce using rule 22 (primitive)


State 29

   10 identifier_declared: VAR identifier_list BOOL '=' . bool_type

    FALSE  shift, and go to state 22
    TRUE   shift, and go to state 23

    bool_type  go to state 35


State 30

    9 identifier_declared: VAR identifier_list INT '=' . NUMBER

    NUMBER  shift, and go to state 36


State 31

   12 identifier_declared: VAR identifier_list REAL '=' . REAL_NUMBER

    REAL_NUMBER  shift, and go to state 37


State 32

   11 identifier_declared: VAR identifier_list STRING '=' . STR

    STR  shift, and go to state 38


State 33

   13 identifier_declared: VAR identifier_list '[' NUMBER . ']' primitive_type

    ']'  shift, and go to state 39


State 34

    5 identifier_list: ID '=' ID ',' . identifier_list

    ID  shift, and go to state 6

    identifier_list  go to state 40


State 35

   10 identifier_declared: VAR identifier_list BOOL '=' bool_type .

    $default  reduce using rule 10 (identifier_declared)


State 36

    9 identifier_declared: VAR identifier_list INT '=' NUMBER .

    $default  reduce using rule 9 (identifier_declared)


State 37

   12 identifier_declared: VAR identifier_list REAL '=' REAL_NUMBER .

    $default  reduce using rule 12 (identifier_declared)


State 38

   11 identifier_declared: VAR identifier_list STRING '=' STR .

    $default  reduce using rule 11 (identifier_declared)


State 39

   13 identifier_declared: VAR identifier_list '[' NUMBER ']' . primitive_type

    BOOL    shift, and go to state 41
    INT     shift, and go to state 42
    REAL    shift, and go to state 43
    STRING  shift, and go to state 44

    primitive_type  go to state 45


State 40

    5 identifier_list: ID '=' ID ',' identifier_list .

    $default  reduce using rule 5 (identifier_list)


State 41

   17 primitive_type: BOOL .

    $default  reduce using rule 17 (primitive_type)


State 42

   16 primitive_type: INT .

    $default  reduce using rule 16 (primitive_type)


State 43

   18 primitive_type: REAL .

    $default  reduce using rule 18 (primitive_type)


State 44

   15 primitive_type: STRING .

    $default  reduce using rule 15 (primitive_type)


State 45

   13 identifier_declared: VAR identifier_list '[' NUMBER ']' primitive_type .

    $default  reduce using rule 13 (identifier_declared)
